<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- Root Context(프로젝트 별로 파일 이름이 다를 수 있음): 부모 스프링 컨테이너를 만드는 설정 파일 -->	
	
	<!-- component-scan: 대상 패키지있는  -->
	<context:component-scan base-package="com.ezen.spring.service"></context:component-scan>
	
	<!-- bean 객체 생성 -->
	<!-- 컨테이너가 구동되면서 자동으로 생성 -->
	<!-- 어떤 id로 어떤 객체를 생성할건지 -->
	<!-- init-method: 멤버변수 초기화가 필요한 객체들은 초기화 메소드를 만들어서 등로 -->
	<!-- destroy-method: 객체 삭제되기 전에 해야할 동작들을 메소드로 지정-->
	<!-- lazy-init: 객체의 생성 시점 설정. false(기본값). true 설정: 객체 요청할 때 생성 -->
	<!-- scope: 객체 생성 방식(하나의 객체만 생성할지 여러 개 생성할지) 지정. singleton(기본값), prototype(여러 개)
	            객체를 계소개서 생성하게되면 메모리 부하 걸리기 때문에, singleton으로 지정하는 것이 바람직 -->
	            
	<!-- 생성자 변경시 <constructor-arg ref="매개변수로 가져갈 객체id, 숫자, 스트링 등등"></construvtor-arg> -->
	<!-- 생성자 함수를 이용한 DI
	<bean id="sTv" class="com.ezen.spring.polymorphism.SamsungTV">
		<constructor-arg index="0" ref="apple"></constructor-arg>
		<constructor-arg index="1" value="100000"></constructor-arg>
	</bean> -->
	
	<!-- 세터함수를 이용한 DI -->
	<!--  
	<bean id="sTv" class="com.ezen.spring.polymorphism.SamsungTV">
		<property name="speaker" ref="apple"></property>
		<property name="price" value="100000"></property>
	</bean> -->
	
	<!-- p namespace를 이용한 세터함수 호출(DI) -->
	<!-- 
	<bean id="sTv" class="com.ezen.spring.polymorphism.SamsungTV"
	p:speaker-ref="apple" p:price="1000000">
	</bean> -->
	
	<!-- constructor-arg ref에 객체가 들어갈 경우 미리 생성된객체를 사용해야 함 
	     그래서 SonySpeaker도 bean객체로 등록-->
	<!--  
	<bean id="sony" class="com.ezen.spring.polymorphism.SonySpeaker"/>
	<bean id="apple" class="com.ezen.spring.polymorphism.AppleSpeaker"/>
	<bean id="lTv" class="com.ezen.spring.polymorphism.LgTV"/>
	-->
	
	<!-- AOP 설정 -->
	<!-- 공통관심인 클래스는 bean객체로 미리 생성해야된다. -->
	<bean id="log" class="com.ezen.spring.common.Log4jAdvice"></bean>
	
	<!-- AOP 동작 설정 -->
	<!-- <aop:config>: aop설정의 루트 엘리먼트. 항상 <aop:config>로 감싼 다음에 aop 설정을 시작 -->
	<aop:config>
		<!-- aop:pointcut: 공통 기능 코드가 실행될 메소드 지정  -->
		<aop:pointcut id="allpointcut" 
					expression="execution(* com.ezen.spring.service..*Impl.*(..))"></aop:pointcut>
		<aop:pointcut id="getallpointcut" 
					expression="execution(* com.ezen.spring.service..*Impl.get*(..))"></aop:pointcut>
		
		<!-- aop:aspect: 포인트컷+어드바이스가 결합되는 설정-->
		<!-- aop가 어떤 객체 사용할건지, log사용할거야 -->
		<aop:aspect ref="log">
			<!-- 어드바이스: 공통으로 추가될 기능 코드(printLogging)  -->
			<!-- 언제before, 어떠한 기능이printLogging, 어디서allpointcut 일어날지 -->
			<aop:before method="printLogging" pointcut-ref="allpointcut"/>
		</aop:aspect>
	</aop:config>
	
	
	
	
	
	
	
	
	
	
	
	
</beans>
